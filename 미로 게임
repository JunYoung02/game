#include<stdio.h>
#include<Windows.h>
#include<stdio.h>
#include<conio.h>
#include<time.h>

#define Space 32    // 스페이스바의 아스키코드 
#define DARKBLUE 1      // 글자 다크 블루 1
#define DARKGREEN 2         // 글자 다크 그린
#define GRAY 7      // 글자 그레이 7
#define DARKGRAY 8 // 글자 다크 그레이 8
#define SKYBLUE 11   // 글자 스카이 블루 11
#define RED 12      // 글자 빨간색 12
#define PURPLE 13   // 글자 보라색 13
#define YELLOW 14   // 글자 노란색 14
#define WHITE 15   // 글자 흰색 15

#define TRUE 1      // 참 1
#define FALSE 0     // 거짓 0

void gotoxy(int x, int y);   // 좌표 설정 함수
void chcolor(int co);      // 글자 색 입히기, co에 원하는 색 입력
void GameSet();         // 게임 테두리 
 
// 추가한 부분
#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77

void drawmap();     // 미로 그리기
void move_miro();      // 미로에서 캐릭터 이동

int map[45][63] =      // 미로 설정,  캐릭터 시작 위치는 9, 종점은 10.
{
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {9,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1},
    {1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,1},
    {1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,1},
    {1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,1},
    {1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1},
    {1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1},
    {1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1},
    {1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1},
    {1,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1},
    {1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1},
    {1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1},
    {1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1},
    {1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1},
    {1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1},
    {1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1},
    {1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,0,1},
    {1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1},
    {1,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1},
    {1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1},
    {1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1},
    {1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1},
    {1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1},
    {1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,1},
    {1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1},
    {1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1},
    {1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1},
    {1,0,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1},
    {1,0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1},
    {1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1},
    {1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1},
    {1,0,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1},
    {1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1},
    {1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1},
    {1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,1},
    {1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1},
    {1,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1},
    {1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1},
    {1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,1,0,1},
    {1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1},
    {1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1},
    {1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,1,0,10},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};


void drawmap()      // 미로 그리는 함수
{
    int i, j, k = 0, y = 3;     // i,j는 2차원 배열에 저장된 값을 하나씩 확인하여, k에 저장하고 for()문을 이용하여 미로 출력, y는 y좌표를 설정하기 위해 사용

    for (i = 0; i < 45; i++)
    {
        chcolor(WHITE);
        gotoxy(21, y++);    // 이 위치부터 미로를 그리기 시작함, y값을 증가시켜 다음 줄로 넘어가도록 함

        for (j = 0; j < 63; j++)
        {
            chcolor(WHITE);
            k = map[i][j];
            switch (k)
            {
            case 0:
                printf("  ");
                break;
            case 1:
                printf("■");    // 1이면 벽을 출력
                break;
            case 9:
                chcolor(RED);
                printf("●");    // 9이면 플레이어를 빨간색으로 출력
                break;
            case 10:            // 10이면 종점을 노란색으로 출력
                chcolor(YELLOW);
                printf("▲");
                break;
            }
        } 
    }
}

void move_miro()        // 미로 게임 플레이
{
    int site;
    int x = 1, y = 0;       // 처음 캐릭터의 위치

    while (1)
    {
        drawmap();
        site = _getch();

        switch (site)
        {
        case 224:

            site = _getch();

            switch (site)       // 이동 가능한 곳이면 플레이어를 움직이고, 이전에 있던 곳은 0으로 바꿔준다.
            {
            case RIGHT:
                y++;
                if (map[x][y] == 0)     
                {
                    map[x][y] = 9;
                    map[x][y -1] = 0;
                }
                else if (map[x][y] == 1)
                {
                    y--;
                }
                break;
            case LEFT:      // 왼쪽과 위에키만 문제 발견
                y--;
                if (y == -1)
                {
                    y++;
                    continue;
                }
                else if (map[x][y] == 0)
                {
                    map[x][y] = 9;
                    map[x][y + 1] = 0;
                }
                else if (map[x][y] == 1)
                {
                    y++;
                }
                break;
            case UP:
                x--;
                if (x == -1)    // 2차원 배열에서 -1값이 나올 순 없으므로, -1이 나오면 건너뛰고 진행하도록 설정
                {
                    x++;
                    continue;
                }
                else if (map[x][y] == 0)
                {
                    map[x][y] = 9;
                    map[x + 1][y] = 0;
                }
                else if (map[x][y] == 1)
                {
                    x++;
                }
                break;
            case DOWN:
                x++;
                if (map[x][y] == 0)
                {
                    map[x][y] = 9;
                    map[x - 1][y] = 0;
                }
                else if (map[x][y] == 1)
                {
                    x--;
                }
                break;
            }
        }
        if (map[x][y] == 10)        // 플레이어가 종점에 도착했을 경우
        {
            map[x][y] = 9;
            system("cls");
            GameSet();
            
            chcolor(WHITE); gotoxy(20, 10); printf("게임 끝");
            break;
        }
    }
}

// 여기까지 추가 했음
void gotoxy(int x, int y)   // 좌표 설정 함수
{
    COORD pos = { x,y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

void chcolor(int co)      // 글자 색 입히기, co에 원하는 색 입력
{

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), co);

}

void GameSet()      // 게임 테두리
{
    int i;

    chcolor(PURPLE);

    gotoxy(3, 2);
    for (i = 0; i < 81; i++)    // 테두리 윗 부분
    {
        printf("■");
    }

    for (i = 3; i < 48; i++)
    {
        gotoxy(3, i); printf("■");
        gotoxy(163, i); printf("■");
    }

    gotoxy(3, 48);
    for (i = 0; i < 81; i++)        // 테두리 아랫 부분
    {
        printf("■");
    }
}

int main()
{
    system("mode con cols=170 lines=50");    //cols = 칸/행 (가로)  lines = 줄/열 (세로)


    GameSet();          // 게임 테두리 출력

    //miro();
    //drawmap();

    move_miro();

    char kb;
     
    kb = _getch();

    if (kb == Space)
    {
        system("cls");
    }
    return 0;
}